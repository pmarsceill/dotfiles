#!/usr/bin/env node
// This downloads the latest release of Redwood from https://github.com/redwoodjs/create-redwood-app/
// and extracts it into the supplied directory.
//
// Usage:
// `$ yarn create redwood-app ./path/to/new-project`
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/slice"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _decompress = _interopRequireDefault(require("decompress"));

var _axios = _interopRequireDefault(require("axios"));

var _listr = _interopRequireDefault(require("listr"));

var _execa = _interopRequireDefault(require("execa"));

var _tmp = _interopRequireDefault(require("tmp"));

var _checkNodeVersion = _interopRequireDefault(require("check-node-version"));

var _chalk = _interopRequireDefault(require("chalk"));

var _context;

const RELEASE_URL = 'https://api.github.com/repos/redwoodjs/create-redwood-app/releases/latest';

const latestReleaseZipFile = async () => {
  const response = await _axios.default.get(RELEASE_URL);
  return response.data.zipball_url;
};

const downloadFile = async (sourceUrl, targetFile) => {
  const writer = _fs.default.createWriteStream(targetFile);

  const response = await _axios.default.get(sourceUrl, {
    responseType: 'stream'
  });
  response.data.pipe(writer);
  return new _promise.default((resolve, reject) => {
    writer.on('finish', resolve);
    writer.on('error', reject);
  });
};

const targetDir = String((0, _slice.default)(_context = process.argv).call(_context, 2)).replace(/,/g, '-');

if (!targetDir) {
  console.error('Please specify the project directory');
  console.log(`  ${_chalk.default.cyan('yarn create redwood-app')} ${_chalk.default.green('<project-directory>')}`);
  console.log();
  console.log('For example:');
  console.log(`  ${_chalk.default.cyan('yarn create redwood-app')} ${_chalk.default.green('my-redwood-app')}`);
  process.exit(1);
}

const newAppDir = _path.default.resolve(process.cwd(), targetDir);

const appDirExists = _fs.default.existsSync(newAppDir);

if (appDirExists && _fs.default.readdirSync(newAppDir).length > 0) {
  console.error(`'${newAppDir}' already exists and is not empty.`);
  process.exit(1);
}

const createProjectTasks = ({
  newAppDir
}) => {
  const tmpDownloadPath = _tmp.default.tmpNameSync({
    prefix: 'redwood',
    postfix: '.zip'
  });

  return [{
    title: `${appDirExists ? 'Using' : 'Creating'} directory '${newAppDir}'`,
    task: () => {
      _fs.default.mkdirSync(newAppDir, {
        recursive: true
      });
    }
  }, {
    title: 'Downloading latest release',
    task: async () => {
      const url = await latestReleaseZipFile();
      return downloadFile(url, tmpDownloadPath);
    }
  }, {
    title: 'Extracting latest release',
    task: () => (0, _decompress.default)(tmpDownloadPath, newAppDir, {
      strip: 1
    })
  }, {
    title: 'Clean up',
    task: () => {
      try {
        _fs.default.unlinkSync(_path.default.join(newAppDir, 'README.md'));

        _fs.default.renameSync(_path.default.join(newAppDir, 'README_APP.md'), _path.default.join(newAppDir, 'README.md'));

        _fs.default.unlinkSync(_path.default.join(newAppDir, '.gitignore'));

        _fs.default.renameSync(_path.default.join(newAppDir, '.gitignore.app'), _path.default.join(newAppDir, '.gitignore'));
      } catch (e) {
        throw new Error('Could not move project files');
      }
    }
  }];
};

const installNodeModulesTasks = ({
  newAppDir
}) => {
  return [{
    title: 'Checking node and yarn compatibility',
    task: () => {
      return new _promise.default((resolve, reject) => {
        const {
          engines
        } = require(_path.default.join(newAppDir, 'package.json'));

        (0, _checkNodeVersion.default)(engines, (_error, result) => {
          var _context2;

          if (result.isSatisfied) {
            return resolve();
          }

          const errors = (0, _map.default)(_context2 = (0, _keys.default)(result.versions)).call(_context2, name => {
            const {
              version,
              wanted
            } = result.versions[name];
            return `${name} ${wanted} required, but you have ${version}.`;
          });
          return reject(new Error(errors.join('\n')));
        });
      });
    }
  }, {
    title: 'Running `yarn install`... (This could take a while)',
    task: () => {
      return (0, _execa.default)('yarn install', {
        shell: true,
        cwd: newAppDir
      });
    }
  }];
};

new _listr.default([{
  title: 'Creating Redwood app',
  task: () => new _listr.default(createProjectTasks({
    newAppDir
  }))
}, {
  title: 'Installing packages',
  task: () => new _listr.default(installNodeModulesTasks({
    newAppDir
  }))
}], {
  collapse: false,
  exitOnError: true
}).run().then(() => {
  // TODO: show helpful out for next steps.
  console.log();
  console.log(`Thanks for trying out Redwood! We've created your app in '${newAppDir}'`);
  console.log();
  console.log('Inside that directory you can run `yarn rw dev` to start the development server.');
}).catch(e => {
  console.log();
  console.log(e);
  process.exit(1);
});